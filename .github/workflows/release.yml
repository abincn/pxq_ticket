name: Release
on:
  push:
    tags:
      - 'v*' # 仅在推送 v 开头的标签时触发
  workflow_dispatch: # 允许手动触发

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Rust setup
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # 这可能会拉取 Rust 1.80.0 或更高版本

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libsoup2.4-dev # 添加了 libsoup2.4-dev

      - name: Install app dependencies (npm)
        run: npm install

      - name: Update Rust dependencies (to fix 'time' crate issue with Rust 1.80.0+)
        # 这一步非常重要，用于解决 time crate < 0.3.35 与 Rust 1.80.0+ 的兼容性问题
        # 它会更新 Cargo.lock 文件中的依赖版本
        working-directory: ./src-tauri # 确保在 Tauri 项目的 Rust 部分执行 cargo 命令
        run: cargo update

      - name: Build project (Tauri)
        # env:
        #   TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        #   TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npm run tauri build

      - name: Upload build artifacts (for other jobs)
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/**/*
            src-tauri/target/release/*.AppImage
            src-tauri/target/release/*.deb
            src-tauri/target/release/*.dmg
            src-tauri/target/release/*.msi
            src-tauri/target/release/*.zip
            src-tauri/target/release/*.tar.gz
            # 以下行为备用，以防某些文件不在 bundle 目录内
            src-tauri/target/release/app-*.msi
            src-tauri/target/release/app_*.AppImage
            src-tauri/target/release/app_*.deb

      - name: Create GitHub Release and Upload Assets
        id: pxq-release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Release ${{ github.ref_name }}'
          # releaseBodyFile: CHANGELOG.md # 推荐使用 CHANGELOG 文件
          releaseDraft: false
          prerelease: false
          # tauri-action v0 会自动查找常见的构建产物路径
          # 如果你的产物路径非常特殊，可能需要配置 artifactsPath 或 include

  upload_to_telegram:
    runs-on: ubuntu-latest
    needs: release
    if: success() && startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Install Python dependencies
      run: pip install requests python-telegram-bot --user # --user 可能在某些环境中不是必须的，但通常无害
    
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts-for-telegram # 所有产物会下载到这个目录下的对应子目录 (如 tauri-app-macos-latest 等)

    - name: List downloaded files (for debugging)
      run: ls -R ./artifacts-for-telegram

    - name: Execute Python script to upload to Telegram
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }} 
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }} 
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 如果脚本需要访问 GitHub API
        TAG_NAME: ${{ github.ref_name }}
        ARTIFACTS_PATH: ./artifacts-for-telegram
      run: |
        python upload_to_telegram.py
