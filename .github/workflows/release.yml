name: Release
on:
  push:
    tags:
      - 'v*' # 仅在推送 v 开头的标签时触发
  workflow_dispatch: # 允许手动触发

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 更新到 v4

      - name: Node.js setup
        uses: actions/setup-node@v4 # 更新到 v4
        with:
          node-version: 18

      - name: Rust setup
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2 # 保持 v2，移除不必要的空参数以简化

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libsoup2.4-dev
      
      - name: Install app dependencies
        run: npm install

      - name: Build project (Tauri)
        # 注意：Tauri build 命令通常会调用 Cargo build。
        # `TAURI_PRIVATE_KEY` 和 `TAURI_KEY_PASSWORD` 是可选的，用于代码签名。
        # 如果你的应用需要签名，请确保在 secrets 中设置它们。
        # env:
        #   TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        #   TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npm run tauri build

      - name: Upload build artifacts (for other jobs)
        # 这个步骤是为了让后续的 upload_to_telegram 作业能够获取构建产物
        # tauri-action 会自己上传到 GitHub Release，但这里的 artifact 是用于工作流内部传递
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}
          # Tauri 构建产物通常在 src-tauri/target/release/bundle/ 目录下
          # 根据你的具体构建输出，可能需要调整路径
          # 例如: src-tauri/target/release/*.msi, src-tauri/target/release/bundle/dmg/*.dmg 等
          # 使用更通用的路径来包含所有构建类型：
          path: |
            src-tauri/target/release/bundle/**/*
            src-tauri/target/release/*.AppImage
            src-tauri/target/release/*.deb
            src-tauri/target/release/*.dmg
            src-tauri/target/release/*.msi
            src-tauri/target/release/*.zip
            src-tauri/target/release/*.tar.gz
            # 确保这些路径能覆盖所有平台和包类型的输出
            # 也可以简单使用 src-tauri/target/release/bundle/ (如果所有东西都在bundle下)
            # 或者 src-tauri/target/release/ (如果有些直接在release下)

      - name: Create GitHub Release and Upload Assets
        id: pxq-release # 注意：你原来的id是 pxq-release，这里保持一致
        uses: tauri-apps/tauri-action@v0 # tauri-action 会处理构建产物的上传
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用标准的 GITHUB_TOKEN
        with:
          tagName: ${{ github.ref_name }} # 当由 tag 触发时，使用实际的 tag 名称 (例如 v1.2.3)
                                         # 对于 workflow_dispatch，这个值可能是分支名，tauri-action 会尝试从 tauri.conf.json 获取版本
          releaseName: 'Release ${{ github.ref_name }}' # 发布名称，同样使用 tag 名称
          # releaseBody: ${{ github.event.head_commit.message }} # 这是原有的，但可能不是最佳选择
          # 考虑使用一个 CHANGELOG.md 文件:
          # releaseBodyFile: CHANGELOG.md
          # 或者留空，让 tauri-action 尝试使用附注标签的信息 (如果标签是附注标签)
          # 如果希望更动态，可以从 tag 推送事件中获取提交信息，但对于 workflow_dispatch 需要不同处理
          # 为了简单修复，暂时注释掉，或保持你原来的设置，但请知晓其局限性
          releaseDraft: false
          prerelease: false
          # `tauri-action` 会自动查找 `src-tauri/target/release/bundle` 下的产物
          # 如果你的产物在其他地方，可能需要配置 `distPath` 或 `artifactPaths`

  upload_to_telegram:
    runs-on: ubuntu-latest
    needs: release # 确保 release 作业成功完成后再运行
    if: success() && startsWith(github.ref, 'refs/tags/') # 仅在 release 作业成功且是标签推送时运行
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 更新到 v4 (获取 Python 脚本)
      
    - name: Set up Python
      uses: actions/setup-python@v5 # 更新到 v5
      with:
        python-version: '3.x'
        
    - name: Install Python dependencies
      run: pip install requests python-telegram-bot --user
    
    - name: Download all build artifacts
      uses: actions/download-artifact@v4 # 更新到 v4
      with:
        # 如果不指定 name，会下载所有上传的 artifacts
        # 它们会被下载到各自的子目录中 (基于 upload-artifact 时指定的 name)
        path: ./artifacts-for-telegram # 所有产物会下载到这个目录下的对应子目录

    - name: List downloaded files (for debugging)
      run: ls -R ./artifacts-for-telegram

    - name: Execute Python script to upload to Telegram
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }} 
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }} 
        OWNER: ${{ github.repository_owner }}  # 从上下文获取 owner
        REPO: ${{ github.event.repository.name }} # 从上下文获取 repo name
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 如果脚本需要访问 GitHub API
        TAG_NAME: ${{ github.ref_name }} # 将标签名传递给脚本
        ARTIFACTS_PATH: ./artifacts-for-telegram # 告诉脚本去哪里找文件
      run: |
        python upload_to_telegram.py
